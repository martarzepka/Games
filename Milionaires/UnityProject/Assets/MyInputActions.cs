//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/MyInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputActions"",
    ""maps"": [
        {
            ""name"": ""RestartClose"",
            ""id"": ""432c1b5e-7a91-48a1-b01e-d551760e7197"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""69e8114e-ffcb-4137-9643-697c699bb45d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""0f65be07-0237-403f-912f-b23a41553d8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""8e8b1535-639e-4548-872b-786fe90497e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bd74bd8-67da-4747-934e-af9389d6b32d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""763c402d-0c5e-402c-8121-dad85aa9b70f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d15f2a13-0a57-4d83-a8e0-90295b8ded9a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RestartClose
        m_RestartClose = asset.FindActionMap("RestartClose", throwIfNotFound: true);
        m_RestartClose_Restart = m_RestartClose.FindAction("Restart", throwIfNotFound: true);
        m_RestartClose_Close = m_RestartClose.FindAction("Close", throwIfNotFound: true);
        m_RestartClose_Quit = m_RestartClose.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RestartClose
    private readonly InputActionMap m_RestartClose;
    private List<IRestartCloseActions> m_RestartCloseActionsCallbackInterfaces = new List<IRestartCloseActions>();
    private readonly InputAction m_RestartClose_Restart;
    private readonly InputAction m_RestartClose_Close;
    private readonly InputAction m_RestartClose_Quit;
    public struct RestartCloseActions
    {
        private @MyInputActions m_Wrapper;
        public RestartCloseActions(@MyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_RestartClose_Restart;
        public InputAction @Close => m_Wrapper.m_RestartClose_Close;
        public InputAction @Quit => m_Wrapper.m_RestartClose_Quit;
        public InputActionMap Get() { return m_Wrapper.m_RestartClose; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RestartCloseActions set) { return set.Get(); }
        public void AddCallbacks(IRestartCloseActions instance)
        {
            if (instance == null || m_Wrapper.m_RestartCloseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RestartCloseActionsCallbackInterfaces.Add(instance);
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(IRestartCloseActions instance)
        {
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(IRestartCloseActions instance)
        {
            if (m_Wrapper.m_RestartCloseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRestartCloseActions instance)
        {
            foreach (var item in m_Wrapper.m_RestartCloseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RestartCloseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RestartCloseActions @RestartClose => new RestartCloseActions(this);
    public interface IRestartCloseActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
